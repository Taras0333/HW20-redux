{"version":3,"sources":["img/star-wars-girl-power-6fca5925.jpg","img/134932.svg","img/1251845.svg","img/929417.svg","post/header-render.js","post/main-render.js","post/post.js","reducers/reducer.js","store/store.js","input/input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Render","connect","state","props","className","name","nick","date","content","RenderMain","src","photo","alt","mes","messagesCount","share","sharesCount","heart","likesCount","post","Post","info","nickname","this","parag","Component","initialStore","reducer","store","action","type","author","createStore","Input","dispatch","change","message","aut","onChange","e","target","value","selected","disabled","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6233c85a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-girl-power-6fca5925.bbe4080b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/134932.c6972b98.svg\";","module.exports = __webpack_public_path__ + \"static/media/1251845.99243e5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/929417.01b91a1b.svg\";","import React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst mapState = (state) =>{\n  return state;\n}\n\n\n\n\nconst Render = connect(mapState, null)((props) => {\n  \n  return( \n  <div className=\"top-bar\">\n    <div className=\"img-cont\"></div>\n    <div className=\"content-wrap\">\n      <div className=\"user-info\">\n        <span className=\"user\">{props.name}</span>\n        <div className=\"check\"></div>\n        <span className=\"nick\">{props.nick}</span>\n        <span className=\"date\">{props.date}</span>\n        <div className=\"header-arrow\"></div>\n      </div>\n      <span className=\"parag\">{props.content}</span>\n    </div>\n  </div>\n  )\n});\nexport default Render;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst mapState = (state) => {\n  return state;\n}\n\n\nconst RenderMain = connect(mapState, null)((props) => (\n  <div className=\"bottom-container\">\n    <div className=\"top-wrap\">\n      <img className=\"main-img\" src={props.photo} alt=\"girl\" />\n         \n      \n    </div>\n    <div className=\"bot-wrap\">\n      <div className=\"bot-items\">\n        <img className=\"logo\" src={props.mes} />\n<span>{props.messagesCount}</span>\n      </div>\n      <div className=\"bot-items\">\n        <img className=\"logo\" src={props.share} />\n        <span>{props.sharesCount}</span>\n      </div>\n      <div className=\"bot-items\">\n        <img className=\"logo\" src={props.heart} />\n        <span>{props.likesCount}</span>\n      </div>\n      <div className=\"bot-items\">\n        <img className=\"logo\" src={props.post} />\n      </div>\n    </div>\n  </div>\n));\nexport default RenderMain;\n","import React, { Component } from \"react\";\nimport Render from \"./header-render\";\nimport Main from \"./main-render\";\n\n\nclass Post extends Component {\n  state = {\n    info: [\n      {\n        name: \"Anakin Skywalker\",\n        photo: \"\",\n        nickname: \"dart_vader\",\n        content: \"WTF? Who is RAY? Why she is Skywalker? Luke...?\",\n        date: \"•26 February\",\n      },\n    ],\n  };\n  render() {\n    return (\n      <div className=\"cont\">\n        <Render\n          name={this.state.info[0].name}\n          nick={this.state.info[0].nickname}\n          date={this.state.info[0].date}\n          parag={this.state.info[0].content}\n        />\n\n        <Main   />\n      </div>\n    );\n  }\n}\nexport default Post;\n","import photo from \"../img/star-wars-girl-power-6fca5925.jpg\"\nimport mes from \"../img/134932.svg\";\nimport share from \"../img/1251845.svg\";\nimport heart from \"../img/929417.svg\";\n\nconst initialStore = {\n    name: \"Anakin Skywalker\",\n    photo: `${photo}`,\n    nickname: \"dart_vader\",\n    content: \"WTF? Who is RAY? Why she is Skywalker? Luke...?\",\n    date: \"•26 February\",\n    mes: `${mes}`,\n    share: `${share}`,\n    heart: `${heart}`,\n    messagesCount: 545,\n    sharesCount: 141,\n    likesCount: 414,\n    \n}\n\n\nconst reducer = (store = initialStore, action) => {\nswitch(action.type){\n    case \"CHANGE_CONTENT\": {\n        return{\n            ...store,\n            content: action.content,\n            name: action.author\n        }\n    }\n    default:{\n        return store\n    } \n}\n}\n\nexport default reducer;","import {createStore} from 'redux';\nimport reducer from \"../reducers/reducer\";\n\nconst store = createStore(reducer);\n\nexport default store;","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport \"./input.css\";\n\nconst mapState = (state) => {\n    return state;\n}\nconst mapDispatch = (dispatch) =>({\n    change(content, author){\n        dispatch({\n            type: \"CHANGE_CONTENT\",\n            content: content,\n            author: author\n          })\n    }\n})\n\n\n\nconst Input = connect(mapState, mapDispatch)((props) => {\n    let message = props.content;\n    let aut = \"\";\n    const saveContent = (e) => {\n        message = e.target.value     \n    }\n    const saveAuthor = (e) =>{\n        aut = e.target.value;\n    }\n    const change = () => {\n    props.change(message, aut)\n    };\n\n\nreturn(\n    <div className=\"inputs-cont\">\n        <label className=\"input-cont\">Post content: <input type=\"text\" className=\"inpt\" onChange={saveContent}></input></label>\n        <select onChange={saveAuthor} className=\"name-input\">\n            <option selected disabled>Choose the author</option>\n            <option>Anakin Skywalker</option>\n            <option>Tonny Montana</option>\n            <option>James Bond</option>\n            <option>Tom Smith</option>\n        </select>\n        <button onClick={change} className=\"save-btn\">Save</button>\n        \n    </div>\n)\n});\nexport default Input;","import React from \"react\";\nimport \"./App.css\";\nimport Post from \"./post/post\";\nimport {Provider} from \"react-redux\"\nimport store from \"./store/store\";\nimport Input from \"./input/input\";\n\n\n\nfunction App() {\n  return (\n   <Provider store={store}>\n     <Post />\n     <Input/>\n   </Provider>\n      \n   \n  \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}